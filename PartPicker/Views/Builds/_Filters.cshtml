@model PartPicker.ViewModels.BuildFiltersViewModel
@using PartPicker.Infrastructure
@using PartPicker.ViewModels
@{
    BuildSearchViewModel searching = new BuildSearchViewModel()
    {
        CpuManufacturers = new List<string>(),
        CpuSeries = new List<string>(),
        GpuManufacturers = new List<string>(),
        RamType = new List<string>(),
        StorageType = new List<string>()
    };
}


<div class="sidebar">
    <button class="dropdown-btn">
        Filtry<i class="caret-down"></i>
    </button>
    <div class="dropdown-container">
        <button class="dropdown-btn">
            Procesor<i class="caret-down"></i>
        </button>
        <div class="dropdown-container">
            <button class="dropdown-btn">
                Producent<i class="caret-down"></i>
            </button>

            <div class="dropdown-container">
                @foreach (var cpu in Model.CpuManufacturers)
                {
                    <button class="dropdown-btn">
                        @cpu<i class="caret-down"></i>
                    </button>
                    <div class="dropdown-container">
                        @foreach (var series in Model.CpuSeries)
                        {
                            foreach (var product in Model.Cpus)
                            {
                                if (product.Product.Manufacturer.Name == cpu && product.Product.Series.Name == series)
                                {
                                    <button>
                                        @series
                                    </button>
                                    break;
                                }
                            }
                        }
                    </div>
                }
            </div>
        </div>

        <button class="dropdown-btn">
            Karta graficzna<i class="caret-down"></i>
        </button>
        <div class="dropdown-container">
            <button class="dropdown-btn">
                Producent<i class="caret-down"></i>
            </button>
            <div class="dropdown-container">
                @foreach (var manufacturer in Model.GpuManufacturers)
                {
                    <a href="#">@manufacturer</a>
                }
            </div>
        </div>

        <button class="dropdown-btn">
            Pamięć RAM<i class="caret-down"></i>
        </button>
        <div class="dropdown-container">
            <button class="dropdown-btn">
                Typ RAM<i class="caret-down"></i>
            </button>
            <div class="dropdown-container">
                @foreach (var ramType in Model.RamTypes)
                {
                    <a href="#">@ramType</a>
                }
            </div>
        </div>

        <button class="dropdown-btn">
            Dysk Twardy<i class="caret-down"></i>
        </button>

        <div class="dropdown-container">
            @foreach (var storageType in Model.StorageTypes)
            {
                <a>@storageType</a>
            }
        </div>
    </div>

    @foreach (var i in searching.CpuManufacturers)
    {
        <p> @i </p>
    }

    @{
        var cpuM = new RouteValueDictionary();
        var cpuS = new RouteValueDictionary();
        searching.CpuSeries.Add("Ryzen 7");
        searching.CpuManufacturers.Add("AMD");

        for (int i = 0; i < searching.CpuManufacturers.Count; ++i)
        {
            cpuM.Add("CpuManufacturers[" + i + "]", searching.CpuManufacturers[i]);
        }

        for (int i = 0; i < searching.CpuSeries.Count; ++i)
        {
            cpuS.Add("CpuSeries[" + i + "]", searching.CpuSeries[i]);
        }
    }

    <a href="@Url.Action("List", "Builds", new { @cpuM = cpuM } )">SEND</a>
</div>

<script src="@Url.Content("~/Scripts/JavaScriptDropDown.js")"></script>