@model PartPicker.ViewModels.BuildFiltersViewModel
@using PartPicker.Infrastructure

<div class="sidebar">
    <button class="dropdown-btn">
        Filtry
    </button>

    <div class="dropdown-container"
         @if (Model.Cache.IsSet(CacheNames.cpuMBuildsFilter) || Model.Cache.IsSet(CacheNames.cpuSBuildsFilter) || Model.Cache.IsSet(CacheNames.gpuSBuildsFilter) || Model.Cache.IsSet(CacheNames.ramTBuildsFilter) || Model.Cache.IsSet(CacheNames.storageTBuildsFilter)) { @: style="display:block !important"
         }>

        <button class="dropdown-btn">
            Procesor
        </button>
        <div class="dropdown-container"
             @if (Model.Cache.IsSet(CacheNames.cpuMBuildsFilter) || Model.Cache.IsSet(CacheNames.cpuSBuildsFilter)) { @: style="display:block !important"
             }>
            <button class="dropdown-btn">
                Producent
            </button>

            <div class="dropdown-container"
                 @if (Model.Cache.IsSet(CacheNames.cpuMBuildsFilter) || Model.Cache.IsSet(CacheNames.cpuSBuildsFilter)) { @: style="display:block !important"
                 }>
                @foreach (var cpu in Model.CpuManufacturers)
                {

                    <button class="dropdown-btn">
                        @cpu
                    </button>
                    <div class="dropdown-container"
                         @if ((Model.Cache.IsSet(CacheNames.cpuMBuildsFilter) || Model.Cache.IsSet(CacheNames.cpuSBuildsFilter))) { @: style="display:block !important"
                         }>
                        @foreach (var series in Model.CpuSeries)
                        {
                            foreach (var product in Model.Cpus)
                            {
                                if (product.Product.Manufacturer.Name == cpu && product.Product.Series.Name == series)
                                {
                                    if (Model.Cache.IsSet(CacheNames.cpuSBuildsFilter))
                                    {
                                        List<string> cpuSeries = Model.Cache.Get(CacheNames.cpuSBuildsFilter) as List<string>;
                                        if (cpuSeries != null && cpuSeries.Contains(series))
                                        {
                                            <a class="filter-send" href="@Url.Action("List", "Builds", new { @cpuS = series })" style="background-color: #29ff0f">
                                                @series
                                            </a>
                                        }
                                        else if (cpuSeries != null)
                                        {
                                            <a class="filter-send" href="@Url.Action("List", "Builds", new { @cpuS = series })">
                                                @series
                                            </a>
                                        }
                                    }
                                    else
                                    {
                                        <a class="filter-send" href="@Url.Action("List", "Builds", new { @cpuS = series })">
                                            @series
                                        </a>
                                    }
                                    break;
                                }
                            }
                        }
                        @if (Model.Cache.IsSet(CacheNames.cpuMBuildsFilter))
                        {
                            List<string> cpuManu = Model.Cache.Get(CacheNames.cpuMBuildsFilter) as List<string>;
                            if (cpuManu != null && cpuManu.Contains(cpu))
                            {
                                <a class="filter-send" href="@Url.Action("List", "Builds", new { @cpuM = cpu })" style="background-color: #29ff0f">
                                    wszystkie
                                </a>
                            }
                            else if (cpuManu != null)
                            {
                                <a class="filter-send" href="@Url.Action("List", "Builds", new { @cpuM = cpu })">
                                    wszystkie
                                </a>
                            }
                        }
                        else
                        {
                            <a class="filter-send" href="@Url.Action("List", "Builds", new { @cpuM = cpu })">
                                wszystkie
                            </a>
                        }
                    </div>
                }
            </div>
        </div>

        <button class="dropdown-btn">
            Karta graficzna
        </button>
        <div class="dropdown-container"
             @if (Model.Cache.IsSet(CacheNames.gpuSBuildsFilter)) { @: style="display:block !important"
             }>
            <button class="dropdown-btn">
                Producent
            </button>
            <div class="dropdown-container"
                 @if (Model.Cache.IsSet(CacheNames.gpuSBuildsFilter)) { @: style="display:block !important"
                 }>
                @foreach (var seriesGpu in Model.GpuSeries)
                {
                    if (Model.Cache.IsSet(CacheNames.gpuSBuildsFilter))
                    {
                        List<string> gpuSeries = Model.Cache.Get(CacheNames.gpuSBuildsFilter) as List<string>;
                        if (gpuSeries != null && gpuSeries.Contains(seriesGpu))
                        {
                            <a class="filter-send" href="@Url.Action("List", "Builds", new { @gpuS = seriesGpu })" style="background-color: #29ff0f">
                                @seriesGpu
                            </a>
                        }
                        else if (gpuSeries != null)
                        {
                            <a class="filter-send" href="@Url.Action("List", "Builds", new { @gpuS = seriesGpu })">
                                @seriesGpu
                            </a>
                        }
                    }
                    else
                    {
                        <a class="filter-send" href="@Url.Action("List", "Builds", new { @gpuS = seriesGpu })">
                            @seriesGpu
                        </a>
                    }
                }
            </div>
        </div>

        <button class="dropdown-btn">
            Pamięć RAM
        </button>
        <div class="dropdown-container"
             @if (Model.Cache.IsSet(CacheNames.ramTBuildsFilter)) { @: style="display:block !important"
             }>
            <button class="dropdown-btn">
                Typ RAM
            </button>
            <div class="dropdown-container"
                 @if (Model.Cache.IsSet(CacheNames.ramTBuildsFilter)) { @: style="display:block !important"
                 }>
                @foreach (var ramType in Model.RamTypes)
                {
                    if (Model.Cache.IsSet(CacheNames.ramTBuildsFilter))
                    {
                        List<string> ramT = Model.Cache.Get(CacheNames.ramTBuildsFilter) as List<string>;
                        if (ramT != null && ramT.Contains(ramType))
                        {
                            <a class="filter-send" href="@Url.Action("List", "Builds", new { @ramT = ramType })" style="background-color: #29ff0f">
                                @ramType
                            </a>
                        }
                        else if (ramT != null)
                        {
                            <a class="filter-send" href="@Url.Action("List", "Builds", new { @ramT = ramType })">
                                @ramType
                            </a>
                        }
                    }
                    else
                    {
                        <a class="filter-send" href="@Url.Action("List", "Builds", new { @ramT = ramType })">
                            @ramType
                        </a>
                    }
                }
            </div>
        </div>

        <button class="dropdown-btn">
            Dysk Twardy
        </button>

        <div class="dropdown-container"
             @if (Model.Cache.IsSet(CacheNames.storageTBuildsFilter)) { @: style="display:block !important"
             }>
            @foreach (var storageType in Model.StorageTypes)
            {
                if (Model.Cache.IsSet(CacheNames.storageTBuildsFilter))
                {
                    List<string> storageT = Model.Cache.Get(CacheNames.storageTBuildsFilter) as List<string>;
                    if (storageT != null && storageT.Contains(storageType))
                    {

                        <a class="filter-send" href="@Url.Action("List", "Builds", new { @storageT = storageType })" style="background-color: #29ff0f">
                            @storageType
                        </a>
                    }
                    else if (storageT != null)
                    {
                        <a class="filter-send" href="@Url.Action("List", "Builds", new { @storageT = storageType })">
                            @storageType
                        </a>
                    }
                }
                else
                {
                    <a class="filter-send" href="@Url.Action("List", "Builds", new { @storageT = storageType })">
                        @storageType
                    </a>
                }
            }
        </div>


    </div>

    <a class="filter-send" href="@Url.Action("List", "Builds", new { @reset = 1 })">
        Reset
    </a>

</div>

<script src="@Url.Content("~/Scripts/JavaScriptDropDown.js")"></script>