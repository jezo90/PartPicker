@model PartPicker.ViewModels.BuildListViewModel
@using PartPicker.Infrastructure
@using PagedList.Mvc

<link href="@Url.Content("~/Content/PagedList.css")" rel="stylesheet" />

@{
    ViewBag.Title = "Buildy";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.Action("Form", new { checkd = Model.BuildFormCheckedViewModel })

<div class="content">
    <div class="container ">
        <div class="item-list nazwy">
            <div class="item-box  item-part-photo">
                <div class="item-part">
                    Zdjęcie
                </div>
            </div>
            <div class="item-box">
                <div class="item-part">
                    Nazwa
                </div>
            </div>
            <div class="item-box">
                <div class="item-part">
                    Procesor
                </div>
            </div>
            <div class="item-box">
                <div class="item-part">
                    Karta Graficzna
                </div>
            </div>
            <div class="item-box">
                <div class="item-part">
                    Ilość RAM [GB]
                </div>
            </div>
            <div class="item-box">
                <div class="item-part">
                    Ocena
                </div>
            </div>


        </div>
    </div>
    @foreach (var build in Model.PagedList)
    {
        <div class="container">
            <a class="item-list-a" href="@Url.Action("BuildDetails", "Builds", new { id = build.BuildId, name = build.Name })">
                <div class="item-list">
                    <div class="item-box item-part-photo">
                        <div class="item-part">
                            <img class="item-part-image" src="@Url.BuildsImagesPath(build.Image)" />
                        </div>
                    </div>
                    <div class="item-box">
                        <div class="item-part item-list-name">
                            @build.Name
                        </div>
                    </div>
                    <div class="item-box">
                        <div class="item-part">

                            <img class="part-image" src="@Url.CpusImagesPath(build.Cpu.Image)" />
                            <br />
                            @build.Cpu.Name
                        </div>
                    </div>
                    <div class="item-box">
                        <div class="item-part">

                            <img class="part-image" src="@Url.GpusImagesPath(build.Gpu.Image)" />
                            <br />
                            @build.Gpu.Name

                        </div>
                    </div>
                    <div class="item-box">
                        <div class="item-part">

                            @build.Ram.Size

                        </div>
                    </div>
                    <div class="item-box">
                        <div class="item-part">


                            @{ double grade = Model.Average[build.BuildId]; }
                            @for (var i = 0; i < 5; i++)
                            {
                                if (grade >= 0.75d)
                                {
                                    <img class="star" src="@Url.ImagesPath("star.png")" />
                                    grade = grade - 1.0d;
                                }
                                else if (grade < 0.75d && grade > 0.25d)
                                {
                                    <img class="star" src="@Url.ImagesPath("half.png")" />
                                    grade = grade - 1.0d;
                                }
                                else
                                {
                                    <img class="star" src="@Url.ImagesPath("zero.png")" />
                                    grade = grade - 1.0d;
                                }
                            }
                            <br />
                            @string.Format("{0:N2}", Model.Average[build.BuildId])
                            (@String.Format("{0:0.##}", Model.Count[build.BuildId]))


                        </div>
                    </div>


                </div>
            </a>
        </div>
    }

    <br />
    Strona @( Model.PagedList.PageCount < Model.PagedList.PageNumber ? 0 : Model.PagedList.PageNumber) z @Model.PagedList.PageCount
    <br />
    @{
        string seriesCpuPage = "";
        foreach (var serie in Model.BuildFormCheckedViewModel.CpuSeriesChecked)
        {
            if (serie != "")
            {
                seriesCpuPage += serie + "_";
            }
        }

        string seriesGpuPage = "";
        foreach (var serie in Model.BuildFormCheckedViewModel.GpuSeriesChecked)
        {
            if (serie != "")
            {
                seriesGpuPage += serie + "_";
            }
        }

        string ramTypePage = "";
        foreach (var type in Model.BuildFormCheckedViewModel.RamTypeChecked)
        {
            if (type != "")
            {
                ramTypePage += type + "_";
            }
        }

        string storageTypePage = "";
        foreach (var type in Model.BuildFormCheckedViewModel.StorageTypeChecked)
        {
            if (type != "")
            {
                storageTypePage += type + "_";
            }
        }
    }

    @Html.PagedListPager(Model.PagedList, page => Url.Action("BuildList", new { page,
    @seriesCpuString = seriesCpuPage,
    @seriesGpuString = seriesGpuPage,
    @storageTypeString = storageTypePage,
    @ramTypeString = ramTypePage }))


</div>


