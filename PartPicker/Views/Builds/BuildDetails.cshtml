@using PartPicker.Infrastructure
@using Microsoft.AspNet.Identity
@model PartPicker.Models.Build

@{
    ViewBag.Title = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="content-details-build">
    <div class="container-details-build">
        <!--Obrazek konfiguracji-->
        <div class="details-image">
            <img class="details-image-product" src="@Url.BuildsImagesPath(Model.Image)" />
        </div>

        <div class="details-prices">
            <!--Nazwa konfiguracji-->
            <div class="details-name">
                @Model.Name.ToUpper()
                @if (@User.Identity.GetUserName() == "admin")
                {
                    <a href="@Url.Action("BuildHide", "Builds", new { id = Model.BuildId, name = Model.Name } )" 
                       class="details-delete" style="float:right">
                        @if (!Model.Hidden)
                        /*Przycisk ukryj*/
                        {@:Ukryj
                        }
                        /*Przycisk Pokaż*/
                        else
                        { @: Pokaż
                        }
                    </a>
                }
            </div>
            <!--Informacja czy konfiguracja jest ukryta-->
            @if (Model.Hidden)
            {
                <div class="details-name" style="color: #cc3a3a;">
                    UKRYTY
                </div>
            }
            <!--Autor konfiguracji-->
            <div class="details-build-description">
                Autor: @Model.ApplicationUser.UserName
            </div>
            <!--Ocena konfiguracji-->
            <div class="details-grade">
                @{
                    double sum = 0;
                    foreach (var rate in Model.Rates)
                    {
                        sum += rate.Grade;
                    }
                    double buildGrade = sum / Model.Rates.Count();

                    for (var i = 0; i < 5; i++)
                    {
                        if (buildGrade >= 0.75d)
                        {
                            <img class="details-build-comments-grade-star" src="@Url.ImagesPath("star.png")" />
                            buildGrade = buildGrade - 1.0d;
                        }
                        else if (buildGrade < 0.75d && buildGrade > 0.25d)
                        {
                            <img class="details-build-comments-grade-star" src="@Url.ImagesPath("half.png")" />
                            buildGrade = buildGrade - 1.0d;
                        }
                        else
                        {
                            <img class="details-build-comments-grade-star" src="@Url.ImagesPath("zero.png")" />
                            buildGrade = buildGrade - 1.0d;
                        }
                    }
                }
                (@Model.Rates.Count())
            </div>
            <br />
            <!--Opis konfiguracji-->
            <div class="details-build-description">
                OPIS: <br />
                @Model.Description
            </div>

            <br />
            <!--Dodawanie oceny konfiguracji-->
            @if (Request.IsAuthenticated)
            {
                @Html.Action("RateForm", new { @buildId = Model.BuildId, @name = Model.Name })
            }

        </div>

    </div>

    <br />

    <div class="container-details-build">
        <!--Informacje o komponentach wchodzących w skład konfiguracji-->
        <div class="details-build">
            <!--PROCESOR-->
            <div class="details-build-info">
                <div class="details-build-info-text">
                    PROCESOR:
                </div>
                <a class="details-build-info-link" href="@Url.Action("CpuDetails", "Cpu", new { id = Model.CpuId, name=Model.Cpu.Name })">
                    <img class="details-build-info-image" src="@Url.CpusImagesPath(Model.Cpu.Image)" />
                    <div class="details-build-info-name">
                        @Model.Cpu.Name
                    </div>
                </a>
                <br />
            </div>
            <!--KARTA GRAFICZNA-->
            <div class="details-build-info">
                <div class="details-build-info-text">
                    KARTA GRAFICZNA:
                </div>
                <a class="details-build-info-link" href="@Url.Action("GpuDetails", "Gpu", new { id = Model.GpuId, name=Model.Gpu.Name })">
                    <img class="details-build-info-image" src="@Url.GpusImagesPath(Model.Gpu.Image)" />
                    <div class="details-build-info-name">
                        @Model.Gpu.Name
                    </div>
                </a>
                <br />
            </div>
            <!--PŁYTA GŁÓWNA-->
            <div class="details-build-info">
                <div class="details-build-info-text">
                    PŁYTA GŁÓWNA:
                </div>
                <a class="details-build-info-link" href="@Url.Action("MoboDetails", "Mobo", new { id = Model.MoboId, name=Model.Mobo.Name })">
                    <img class="details-build-info-image" src="@Url.MobosImagesPath(Model.Mobo.Image)" />
                    <div class="details-build-info-name">
                        @Model.Mobo.Name
                    </div>
                </a>
                <br />
            </div>
            <!--DYSK TWARDY-->
            <div class="details-build-info">
                <div class="details-build-info-text">
                    DYSK TWARDY:
                </div>
                <a class="details-build-info-link" href="@Url.Action("StorageDetails", "Storage", new { id = Model.StorageId, name=Model.Storage.Name })">
                    <img class="details-build-info-image" src="@Url.StoragesImagesPath(Model.Storage.Image)" />
                    <div class="details-build-info-name">
                        @Model.Storage.Name
                    </div>
                </a>
                <br />
            </div>
            <!--PAMIĘĆ RAM-->
            <div class="details-build-info">
                <div class="details-build-info-text">
                    PAMIĘĆ RAM:
                </div>
                <a class="details-build-info-link" href="@Url.Action("RamDetails", "Ram", new { id = Model.RamId, name=Model.Ram.Name })">
                    <img class="details-build-info-image" src="@Url.RamsImagesPath(Model.Ram.Image)" />
                    <div class="details-build-info-name">
                        @Model.Ram.Name
                    </div>
                </a>
                <br />
            </div>
            <!--ZASILACZ-->
            <div class="details-build-info">
                <div class="details-build-info-text">
                    ZASILACZ:
                </div>
                <a class="details-build-info-link" href="@Url.Action("PsuDetails", "Psu", new { id = Model.PsuId, name=Model.Psu.Name })">
                    <img class="details-build-info-image" src="@Url.PsusImagesPath(Model.Psu.Image)" />
                    <div class="details-build-info-name">
                        @Model.Psu.Name
                    </div>
                </a>
                <br />
            </div>
            <!--OBUDOWA-->
            <div class="details-build-info">
                <div class="details-build-info-text">
                    OBUDOWA:
                </div>
                <a class="details-build-info-link" href="@Url.Action("CaseDetails", "Case", new { id = Model.CaseId, name=Model.Case.Name })">
                    <img class="details-build-info-image" src="@Url.CasesImagesPath(Model.Case.Image)" />
                    <div class="details-build-info-name">
                        @Model.Case.Name
                    </div>
                </a>
                <br />
            </div>
        </div>
        <br />
        <!--Lista komentarzy z ocenami-->
        <div class="details-build-comments">
            @foreach (var rate in Model.Rates.OrderByDescending(a => a.Grade))
            {
                <div class="details-build-comments-grade">
                    <!--Przycisk do usuwania komentarzy-->
                    @if (@User.Identity.GetUserName() == "admin")
                    {
                        <a href="@Url.Action("BuildCommentDelete", "Builds", new { rateId = rate.RateId, name = Model.Name, buildId = Model.BuildId })"
                           class="details-delete" style="float:right">Usuń</a>
                    }
                    <!--Autor komentarza-->
                    <div class="details-build-comments-grade-text">
                        @rate.ApplicationUser.UserName
                    </div>

                    <!--Ocena-->
                    @{ double grade = rate.Grade; }
                    @for (var i = 0; i < 5; i++)
                    {
                        if (grade >= 0.75d)
                        {
                            <img class="details-build-comments-grade-star" src="@Url.ImagesPath("star.png")" />
                            grade = grade - 1.0d;
                        }
                        else if (grade < 0.75d && grade > 0.25d)
                        {
                            <img class="details-build-comments-grade-star" src="@Url.ImagesPath("half.png")" />
                            grade = grade - 1.0d;
                        }
                        else
                        {
                            <img class="details-build-comments-grade-star" src="@Url.ImagesPath("zero.png")" />
                            grade = grade - 1.0d;
                        }
                    }
                    <br />
                </div>
                <!--Komentarz-->
                <div class="details-build-comments-text">
                    @rate.Comment
                </div>
            }

        </div>
    </div>
</div>

